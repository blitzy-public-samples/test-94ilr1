name: Frontend CI/CD

# Trigger workflow on push/PR to main branch for frontend code changes
on:
  push:
    branches: [main]
    paths: ['src/web/**']
  pull_request:
    branches: [main]
    paths: ['src/web/**']

# Environment variables
env:
  NODE_VERSION: '20'
  WORKING_DIRECTORY: 'src/web'

# Concurrency control to prevent parallel runs on same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.WORKING_DIRECTORY }}/node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci
        timeout-minutes: 5
        
      - name: Run ESLint
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run lint
        timeout-minutes: 5
        
      - name: TypeScript type check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run typecheck
        timeout-minutes: 5
        
      - name: Run unit tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test:coverage
        timeout-minutes: 10
        
      - name: Run integration tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test -- --selectProjects integration
        timeout-minutes: 10
        
      - name: Build application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build
        timeout-minutes: 15
        env:
          NODE_ENV: production
          
      - name: Run E2E tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test:e2e
        timeout-minutes: 30
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ${{ env.WORKING_DIRECTORY }}/coverage
          flags: frontend
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ${{ env.WORKING_DIRECTORY }}/dist
          retention-days: 7

  deploy:
    name: Deploy
    needs: build_and_test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ steps.deploy.outputs.site_url }}
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: dist
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Deploy to S3
        id: deploy
        run: |
          aws s3 sync dist s3://${{ secrets.S3_BUCKET }} --delete
          echo "site_url=https://${{ secrets.CLOUDFRONT_DOMAIN }}" >> $GITHUB_OUTPUT
        timeout-minutes: 10
          
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
        timeout-minutes: 5