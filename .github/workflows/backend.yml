name: Backend CI/CD

# Trigger configuration
on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - staging
          - production

# Environment variables
env:
  NODE_VERSION: '20.x'
  GO_VERSION: '1.21.x'
  PYTHON_VERSION: '3.11.x'
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DOCKER_BUILDKIT: '1'
  COMPOSE_DOCKER_CLI_BUILD: '1'

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Permission configuration
permissions:
  contents: read
  packages: write
  deployments: write
  id-token: write
  security-events: write

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/backend/**/package-lock.json'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: 'src/backend/**/go.sum'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'src/backend/**/poetry.lock'

      - name: Install Node.js dependencies
        run: |
          cd src/backend
          npm ci

      - name: Run ESLint
        run: |
          cd src/backend
          npm run lint

      - name: Run Prettier
        run: |
          cd src/backend
          npm run format -- --check

      - name: Run Go linting
        run: |
          cd src/backend/email-service
          golangci-lint run ./...

      - name: Run Python linting
        run: |
          cd src/backend
          poetry install
          poetry run black --check .
          poetry run isort --check-only .
          poetry run flake8 .

  test:
    name: Run Tests
    needs: [lint]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Run Node.js tests
        run: |
          cd src/backend
          npm ci
          npm run test:coverage

      - name: Run Go tests
        run: |
          cd src/backend/email-service
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Run Python tests
        run: |
          cd src/backend
          poetry install
          poetry run pytest --cov=src --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./src/backend/coverage/coverage-final.json,./src/backend/email-service/coverage.txt,./src/backend/coverage.xml
          flags: backend
          fail_ci_if_error: true

  build:
    name: Build Services
    needs: [test]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        service: [api-gateway, email-service, context-engine, response-generator]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./src/backend/${{ matrix.service }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.DOCKER_REGISTRY }}/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan container image
        uses: aquasecurity/trivy-action@v1
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy Services
    needs: [build]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Kubernetes config
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      - name: Deploy services
        run: |
          cd src/backend/scripts
          chmod +x deploy.sh
          ./deploy.sh \
            --environment ${{ github.event.inputs.environment || 'staging' }} \
            --registry ${{ env.DOCKER_REGISTRY }} \
            --version ${{ github.sha }}

      - name: Verify deployment
        run: |
          cd src/backend/scripts
          chmod +x verify.sh
          ./verify.sh \
            --environment ${{ github.event.inputs.environment || 'staging' }}

      - name: Rollback on failure
        if: failure()
        run: |
          cd src/backend/scripts
          chmod +x rollback.sh
          ./rollback.sh \
            --environment ${{ github.event.inputs.environment || 'staging' }}