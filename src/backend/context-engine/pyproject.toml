[tool.poetry]
name = "context-engine"
version = "1.0.0"
description = "AI-powered context analysis engine for email communications with high-performance processing capabilities"
authors = ["AI Email Management Platform Team"]
license = "Proprietary"
readme = "README.md"
packages = [{include = "src"}]
repository = "https://github.com/org/ai-email-platform"
documentation = "https://docs.ai-email-platform.com"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Information Technology",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Topic :: Communications :: Email",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
python = "^3.11"
# Web Framework - v0.104.0 for latest security patches and performance improvements
fastapi = "^0.104.0"
# ML/AI Dependencies - v2.14.0 for latest optimizations and security updates
tensorflow = "^2.14.0"
numpy = "^1.24.0"
pandas = "^2.1.0"
# API Schema Validation - v2.4.0 for improved performance
pydantic = "^2.4.0"
# ASGI Server - v0.23.0 for enhanced performance
uvicorn = {extras = ["standard"], version = "^0.23.0"}
# Database Drivers
motor = "^3.3.0"  # MongoDB async driver
aioredis = "^2.0.0"  # Redis async client
# Monitoring and Observability
prometheus-client = "^0.17.0"
opentelemetry-api = "^1.20.0"
opentelemetry-sdk = "^1.20.0"
opentelemetry-instrumentation-fastapi = "^0.41.0"
opentelemetry-exporter-otlp = "^1.20.0"
# Security
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"
email-validator = "^2.0.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-benchmark = "^4.0.0"
# Code Quality
black = "^23.9.0"
isort = "^5.12.0"
mypy = "^1.5.0"
flake8 = "^6.1.0"
# Security Testing
bandit = "^1.7.5"
safety = "^2.3.5"
# Git Hooks
pre-commit = "^3.4.0"

[build-system]
requires = ["poetry-core>=1.7.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
start = "uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload"
start:prod = "uvicorn src.main:app --host 0.0.0.0 --port 8000 --workers 4"
test = "pytest tests/"
test:cov = "pytest tests/ --cov=src --cov-report=xml"
test:benchmark = "pytest tests/ --benchmark-only"
lint = "flake8 src/ tests/"
format = "black src/ tests/ && isort src/ tests/"
typecheck = "mypy src/"
security-check = "bandit -r src/ && safety check"
verify = "poetry run lint && poetry run typecheck && poetry run test"

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.11"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
minversion = "7.4"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow",
    "benchmark: marks benchmark tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]