---
# PostgreSQL StatefulSet Configuration
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: ai-email-platform
  labels:
    app: postgres
    tier: database
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
spec:
  replicas: 3
  serviceName: postgres-service
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: postgres
      containers:
        - name: postgres
          image: postgres:14-alpine  # Version 14 as specified in requirements
          ports:
            - containerPort: 5432
              protocol: TCP
          resources:
            requests:
              cpu: "4"
              memory: "16Gi"
            limits:
              cpu: "8"
              memory: "32Gi"
          envFrom:
            - configMapRef:
                name: postgres-config
            - secretRef:
                name: postgres-credentials
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
              subPath: postgresql-db
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
# PostgreSQL Service Configuration
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: ai-email-platform
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgresql
  selector:
    app: postgres
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
---
# PostgreSQL PersistentVolumeClaim Configuration
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: ai-email-platform
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp3
  resources:
    requests:
      storage: 500Gi
  volumeExpansionEnabled: true
---
# PostgreSQL NetworkPolicy Configuration
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: postgres-network-policy
  namespace: ai-email-platform
spec:
  podSelector:
    matchLabels:
      app: postgres
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: email-service
        - podSelector:
            matchLabels:
              app: context-engine
        - podSelector:
            matchLabels:
              app: response-generator
      ports:
        - protocol: TCP
          port: 5432
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
      ports:
        - protocol: UDP
          port: 53  # DNS
        - protocol: TCP
          port: 53  # DNS
---
# PostgreSQL PrometheusRule for Monitoring
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: postgres-monitoring-rules
  namespace: ai-email-platform
spec:
  groups:
    - name: postgres.rules
      rules:
        - alert: PostgreSQLHighConnections
          expr: postgresql_connections > 800
          for: 5m
          labels:
            severity: warning
          annotations:
            description: "PostgreSQL instance has high number of connections"
        - alert: PostgreSQLHighReplicationLag
          expr: pg_replication_lag > 30
          for: 5m
          labels:
            severity: warning
          annotations:
            description: "PostgreSQL replication lag is high"
        - alert: PostgreSQLHighDiskUsage
          expr: disk_usage_percent > 85
          for: 5m
          labels:
            severity: warning
          annotations:
            description: "PostgreSQL disk usage is high"